df <- do.call(rbind, data)
df$subj_idx <- as.numeric(df$subj_idx)
df2 <- df %>%
mutate(matchness =
case_when(subj_idx %% 2 == 1 & correct_response == "j" ~ "match",
subj_idx %% 2 == 1 & correct_response == "f" ~ "mismatch",
subj_idx %% 2 == 0 & correct_response == "f" ~ "match",
subj_idx %% 2 == 0 & correct_response == "j" ~ "mismatch"))
s5 <- df2 %>%
filter(subj_idx == 6) %>%
group_by(valence, matchness) %>%
summarise(n = n())
s6 <- df2 %>%
filter(subj_idx == 6) %>%
group_by(valence, matchness) %>%
summarise(n = n())
View(s5)
View(df)
library(tidyverse)
function (x, df1, df2, ncp, log = FALSE)
{
if (missing(ncp))
.Call(C_df, x, df1, df2, log)
else .Call(C_dnf, x, df1, df2, ncp, log)
}
library(tidyverse)
library(jsonlite)
filenames <- list.files("/Users/zhengyuanrui/Graduation_Project/Analysis/data/test_data/exp2_data", pattern = "csv", full.names = TRUE)
data <- list()
for (i in seq_along(filenames)){
data[[i]] <- read_csv(filenames[i])
data[[i]]$subj_idx <- jsonlite::fromJSON(data[[i]]$response[5])$Q0
data[[i]]$gender <- jsonlite::fromJSON(data[[i]]$response[6])
data[[i]]$year <- jsonlite::fromJSON(data[[i]]$response[7])$Q0
data[[i]]$education <- jsonlite::fromJSON(data[[i]]$response[8])$Q0
data[[i]]$dist <- data[[i]]$view_dist_mm[9]
data[[i]] <- data[[i]] %>%
select(subj_idx, year, education, dist, trial_type, rt, response,
key_press, condition, correct_response, correct, word, Image) %>%
filter(trial_type == "psychophysics")
data[[i]] <- data[[i]] %>%
filter(trial_type == "psychophysics") %>%
mutate(
shape_en = case_when(
Image == "img/C_ambi40.png" ~ "circle",
###这里不同实验需修改图形命名
Image == "img/T_ambi40.png" ~ "triangle",
Image == "img/S_ambi40.png" ~ "square"
)
) %>%
mutate(
valence = case_when(
word == "好人" ~ "Good",
###这里不同实验需修改label的命名
word == "坏人" ~ "Bad",
word == "常人" ~ "Neutral"
)
) %>%
mutate(
ACC = case_when(
correct == "FALSE" ~ 0,
correct == "TRUE" ~ 1
)
) %>%
filter(!grepl("prac_", condition)) %>%
mutate(exp = "exp2")
}
df <- do.call(rbind, data)
df$subj_idx <- as.numeric(df$subj_idx)
df2 <- df %>%
mutate(matchness =
case_when(subj_idx %% 2 == 1 & correct_response == "j" ~ "match",
subj_idx %% 2 == 1 & correct_response == "f" ~ "mismatch",
subj_idx %% 2 == 0 & correct_response == "f" ~ "match",
subj_idx %% 2 == 0 & correct_response == "j" ~ "mismatch"))
s6 <- df2 %>%
filter(subj_idx == 6) %>%
group_by(valence, matchness) %>%
summarise(n = n())
View(s6)
s6 <- df2 %>%
filter(subj_idx == 6)
View(s6)
s6 <- df2 %>%
filter(subj_idx == 6) %>%
group_by(valence, matchness) %>%
summarise(n = n())
s6
s6 <- df2 %>%
filter(subj_idx == 6) %>%
group_by(valence, matchness, condition) %>%
summarise(n = n())
s6
View(df2)
df2 %>%
filter(rt != null)
df2 %>%
filter(rt != "null")
df3 <- df2 %>%
filter(rt != "null")
View(df3)
max(df3$rt)
max(df3$rt)
max(as.numeric(df3$rt))
write_csv(df3, "clean_test.csv")
dat <- read_csv("/Users/zhengyuanrui/Graduation_Project/Analysis/R_code/clean_test.csv")
dat
View(dat)
head(dat)
View(dat)
v <- hypr(
bad_good = Bad ~ Good,
neu_good = Neutral ~ Good,
levels = c("Bad", "Good", "Neutral")
)
library(tidyverse) # data wrangling, plotting
library(brms)      # Bayesian analysis
library(rstan)     # Bayesian analysis
library(tidyverse)
library(here)
library(hypr)
library(bridgesampling)
v <- hypr(
bad_good = Bad ~ Good,
neu_good = Neutral ~ Good,
levels = c("Bad", "Good", "Neutral")
)
contrasts(df_bf$valence) <- contr.hypothesis(v)
contrasts(dat$valence) <- contr.hypothesis(v)
head(dat)
df_bf <- dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt)
df_bf <- dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt) %>%
across(subj_idx:matchness, as.factor)
dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt) %>%
across(subj_idx:matchness, as.factor)
df_bf <- dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt) %>%
across(subj_idx:matchness, as.factor)
dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt)
?across
df_bf <- dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt) %>%
mutate(across(subj_idx:matchness, as.factor))
head(dat)
v <- hypr(
bad_good = Bad ~ Good,
neu_good = Neutral ~ Good,
levels = c("Bad", "Good", "Neutral")
)
contrasts(df_bf$valence) <- contr.hypothesis(v)
m <- hypr(
m_mis = match ~ mismatch,
levels = c("match", "mismatch")
)
contrasts(df_bf$matchness) <- contr.hypothesis(m)
df_bf1
df_bf
library(tidyverse) # data wrangling, plotting
library(brms)      # Bayesian analysis
library(rstan)     # Bayesian analysis
library(tidyverse)
library(here)
library(hypr)
library(bridgesampling)
options(mc.cores = parallel::detectCores())
dat <- read_csv("/Users/zhengyuanrui/Graduation_Project/Analysis/R_code/clean_test.csv")
df_bf <- dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt) %>%
mutate(across(subj_idx:matchness, as.factor))
head(df_bf)
v <- hypr(
bad_good = Bad ~ Good,
neu_good = Neutral ~ Good,
levels = c("Bad", "Good", "Neutral")
)
contrasts(df_bf$valence) <- contr.hypothesis(v)
m <- hypr(
m_mis = match ~ mismatch,
levels = c("match", "mismatch")
)
contrasts(df_bf$matchness) <- contr.hypothesis(m)
model01 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = df_bf,
family = gaussian(),
save_all_pars = TRUE)
##########################################BF##############
df_bf$subj_idx <- as.character(df_bf$subj_idx)
subjects <- unique(df_bf$subj_idx)
subjects
N_total <- length(unique(df_bf$subj_idx))
N_total
N_total <- length(unique(df_bf$subj_idx))
BFs_int <- rep(1, N_total)
BFs_int
c(seq(10, 60, by = 5), 64)
##########################################BF##############
df_bf$subj_idx <- as.character(df_bf$subj_idx)
subjects <- unique(df_bf$subj_idx)
N_total <- length(unique(df_bf$subj_idx))
BFs_int <- rep(1, N_total)
for (i in 1:N_total) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(paste0(i, sep = " ", "subjects"))
model1 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
gc()
summary(model1)
model2 <- brm(rt ~ valence + matchness + condition + valennce:matchness + valence:condition + matchness:condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
summary(model2)
(BFs_int[i] <- bridgesampling::bayes_factor(model1, model2)[["bf"]])
}
for (1 in 1:N_total) {
for (1 in 1:N_total) {
for (1 in 1:N_total) {
for (1 in 1:N_total) {
subset(df_bf, subj_idx %in% head(subjects, 1))
for (1 in 1:N_total) {
for (1 in 1:N_total) {
for (i in 1) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(data)
}
data
View(data)
for (i in 6) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(data)
}
data
View(data)
for (i in 1:N_total) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(paste0(i, sep = " ", "subjects"))
model1 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
gc()
summary(model1)
model2 <- brm(rt ~ valence + matchness + condition + valennce:matchness + valence:condition + matchness:condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
summary(model2)
(BFs_int[i] <- bridgesampling::bayes_factor(model1, model2)[["bf"]])
}
for (i in 1:N_total) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(paste0(i, sep = " ", "subjects"))
model1 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
gc()
summary(model1)
model2 <- brm(rt ~ valence + matchness + condition + valence:matchness + valence:condition + matchness:condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
summary(model2)
(BFs_int[i] <- bridgesampling::bayes_factor(model1, model2)[["bf"]])
}
seq(10, N_total, by = 5)
seq(2, N_total, by = 2)
Ns  <- c(seq(2, N_total, by = 2), N_total)
Ns
Ns
for (i in Ns) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(paste0(i, sep = " ", "subjects"))
model1 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
gc()
summary(model1)
model2 <- brm(rt ~ valence + matchness + condition + valence:matchness + valence:condition + matchness:condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
summary(model2)
(BFs_int[i] <- bridgesampling::bayes_factor(model1, model2)[["bf"]])
}
Ns
rep(1, Ns)
BFs_int <- rep(1, length(Ns))
BFs_int
df_bf$subj_idx <- as.character(df_bf$subj_idx)
subjects <- unique(df_bf$subj_idx)
N_total <- length(unique(df_bf$subj_idx))
Ns  <- c(seq(2, N_total, by = 2), N_total)
BFs_int <- rep(1, length(Ns))
for (i in Ns) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(paste0(i, sep = " ", "subjects"))
model1 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
gc()
summary(model1)
model2 <- brm(rt ~ valence + matchness + condition + valence:matchness + valence:condition + matchness:condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
summary(model2)
(BFs_int[i] <- bridgesampling::bayes_factor(model1, model2)[["bf"]])
}
warnings()
BFs_int
BFs_int
rep(1, length(Ns))
BFs_int <- rep(NA, length(Ns))
BFs_int
model01 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = df_bf,
family = gaussian(),
save_all_pars = TRUE)
model01 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = df_bf,
family = gaussian(),
control = list(adapt_delta = .99, max_treedepth = 12),
save_all_pars = TRUE)
Ns
model01 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = df_bf,
family = gaussian(),
control = list(adapt_delta = .99, max_treedepth = 12),
save_all_pars = TRUE)
BFs_int <- c()
BFs_int
append(BFs_int, "a")
BFs_int <- append(BFs_int, "a")
BFs_int
append(BFs_int, "a")
for (i in Ns) {
data <- subset(df_bf, subj_idx %in% head(subjects, i))
print(paste0(i, sep = " ", "subjects"))
model1 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
gc()
summary(model1)
model2 <- brm(rt ~ valence + matchness + condition + valence:matchness + valence:condition + matchness:condition + (valence * matchness * condition|subj_idx),
data = data,
family = gaussian(),
save_all_pars = TRUE)
summary(model2)
BFs_int <- append(BFs_int, bridgesampling::bayes_factor(model1, model2)[["bf"]])
}
library(tidyverse) # data wrangling, plotting
library(brms)      # Bayesian analysis
library(rstan)     # Bayesian analysis
library(tidyverse)
library(here)
library(hypr)
library(bridgesampling)
#devtools::install_github("RobinHankin/Brobdingnag")
#update.packages("dbplyr")
options(mc.cores = parallel::detectCores())
dat <- read_csv("/Users/zhengyuanrui/Graduation_Project/Analysis/R_code/clean_test.csv")
df_bf <- dat %>%
select(subj_idx, exp, valence, condition, matchness, ACC, rt) %>%
mutate(across(subj_idx:matchness, as.factor))
head(df_bf)
v <- hypr(
bad_good = Bad ~ Good,
neu_good = Neutral ~ Good,
levels = c("Bad", "Good", "Neutral")
)
contrasts(df_bf$valence) <- contr.hypothesis(v)
m <- hypr(
m_mis = match ~ mismatch,
levels = c("match", "mismatch")
)
contrasts(df_bf$matchness) <- contr.hypothesis(m)
model01 <- brm(rt ~ valence * matchness * condition + (valence * matchness * condition|subj_idx),
data = df_bf,
family = gaussian(),
control = list(adapt_delta = .99, max_treedepth = 12),
save_all_pars = TRUE)
library(tidyverse)
library(jsonlite)
filenames <- list.files("/Users/zhengyuanrui/Graduation_Project/Analysis/data/test_data/exp2_data", pattern = "csv", full.names = TRUE)
data <- list()
for (i in seq_along(filenames)){
data[[i]] <- read_csv(filenames[i])
data[[i]]$subj_idx <- jsonlite::fromJSON(data[[i]]$response[5])$Q0
data[[i]]$gender <- jsonlite::fromJSON(data[[i]]$response[6])
data[[i]]$year <- jsonlite::fromJSON(data[[i]]$response[7])$Q0
data[[i]]$education <- jsonlite::fromJSON(data[[i]]$response[8])$Q0
data[[i]]$dist <- data[[i]]$view_dist_mm[9]
data[[i]] <- data[[i]] %>%
select(subj_idx, year, education, dist, trial_type, rt, response,
key_press, condition, correct_response, correct, word, Image) %>%
filter(trial_type == "psychophysics")
data[[i]] <- data[[i]] %>%
filter(trial_type == "psychophysics") %>%
mutate(
shape_en = case_when(
Image == "img/C_ambi40.png" ~ "circle",
###这里不同实验需修改图形命名
Image == "img/T_ambi40.png" ~ "triangle",
Image == "img/S_ambi40.png" ~ "square"
)
) %>%
mutate(
valence = case_when(
word == "好人" ~ "Good",
###这里不同实验需修改label的命名
word == "坏人" ~ "Bad",
word == "常人" ~ "Neutral"
)
) %>%
mutate(
ACC = case_when(
correct == "FALSE" ~ 0,
correct == "TRUE" ~ 1
)
) %>%
filter(!grepl("prac_", condition)) %>%
mutate(exp = "exp2")
}
df <- do.call(rbind, data)
df$subj_idx <- as.numeric(df$subj_idx)
df2 <- df %>%
mutate(matchness =
case_when(subj_idx %% 2 == 1 & correct_response == "j" ~ "match",
subj_idx %% 2 == 1 & correct_response == "f" ~ "mismatch",
subj_idx %% 2 == 0 & correct_response == "f" ~ "match",
subj_idx %% 2 == 0 & correct_response == "j" ~ "mismatch"))
df2 <- df %>%
mutate(matchness =
case_when(subj_idx %% 2 == 1 & correct_response == "j" ~ "match",
subj_idx %% 2 == 1 & correct_response == "f" ~ "mismatch",
subj_idx %% 2 == 0 & correct_response == "f" ~ "match",
subj_idx %% 2 == 0 & correct_response == "j" ~ "mismatch"))
s6 <- df2 %>%
filter(subj_idx == 7) %>%
group_by(valence, matchness, condition) %>%
summarise(n = n())
View(s6)
df3 <- df2 %>%
filter(rt != "null")
write_csv(df3, "clean_test.csv")
library(tidyverse)
library(jsonlite)
filenames <- list.files("/Users/zhengyuanrui/Graduation_Project/Analysis/data/test_data/exp2_data", pattern = "csv", full.names = TRUE)
data <- list()
for (i in seq_along(filenames)){
data[[i]] <- read_csv(filenames[i])
data[[i]]$subj_idx <- jsonlite::fromJSON(data[[i]]$response[5])$Q0
data[[i]]$gender <- jsonlite::fromJSON(data[[i]]$response[6])
data[[i]]$year <- jsonlite::fromJSON(data[[i]]$response[7])$Q0
data[[i]]$education <- jsonlite::fromJSON(data[[i]]$response[8])$Q0
data[[i]]$dist <- data[[i]]$view_dist_mm[9]
data[[i]] <- data[[i]] %>%
select(subj_idx, year, education, dist, trial_type, rt, response,
key_press, condition, correct_response, correct, word, Image) %>%
filter(trial_type == "psychophysics")
data[[i]] <- data[[i]] %>%
filter(trial_type == "psychophysics") %>%
mutate(
shape_en = case_when(
Image == "img/C_ambi40.png" ~ "circle",
###这里不同实验需修改图形命名
Image == "img/T_ambi40.png" ~ "triangle",
Image == "img/S_ambi40.png" ~ "square"
)
) %>%
mutate(
valence = case_when(
word == "好人" ~ "Good",
###这里不同实验需修改label的命名
word == "坏人" ~ "Bad",
word == "常人" ~ "Neutral"
)
) %>%
mutate(
ACC = case_when(
correct == "FALSE" ~ 0,
correct == "TRUE" ~ 1
)
) %>%
filter(!grepl("prac_", condition)) %>%
mutate(exp = "exp2")
}
df <- do.call(rbind, data)
df$subj_idx <- as.numeric(df$subj_idx)
df2 <- df %>%
mutate(matchness =
case_when(subj_idx %% 2 == 1 & correct_response == "j" ~ "match",
subj_idx %% 2 == 1 & correct_response == "f" ~ "mismatch",
subj_idx %% 2 == 0 & correct_response == "f" ~ "match",
subj_idx %% 2 == 0 & correct_response == "j" ~ "mismatch"))
s6 <- df2 %>%
filter(subj_idx == 7) %>%
group_by(valence, matchness, condition) %>%
summarise(n = n())
df3 <- df2 %>%
filter(rt != "null")
View(df3)
